import asyncio
import re
import pytest

# pytest-asyncio >=0.23 auto mode, else use marker
pytestmark = pytest.mark.asyncio

from types import SimpleNamespace

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from bot import handle_message, start_command, FIO, PHONE, SUBJECT, CLASSES, get_fio, get_phone, get_subject, get_classes
from config import AUTHORIZED_CHAT_ID


class DummyMessage:
    def __init__(self, text=""):
        self.text = text
        self.sent_texts = []

    async def reply_text(self, text, reply_markup=None):
        self.sent_texts.append(text)


class DummyUser:
    def __init__(self, user_id=111, username="user", full_name="Teacher Full Name"):
        self.id = user_id
        self.username = username
        self.full_name = full_name


class DummyChat:
    def __init__(self, chat_id=AUTHORIZED_CHAT_ID):
        self.id = chat_id


class DummyUpdate:
    def __init__(self, user_id=111, chat_id=AUTHORIZED_CHAT_ID, text=""):
        self.effective_user = DummyUser(user_id=user_id)
        self.effective_chat = DummyChat(chat_id=chat_id)
        self.message = DummyMessage(text=text)


class DummyContext:
    def __init__(self):
        self.user_data = {}


@pytest.fixture
def dummy_context():
    return DummyContext()


async def _call(coro):
    return await coro


async def _handle(update, context):
    return await handle_message(update, context)


@pytest.mark.asyncio
async def test_registration_entry_triggers_fio_state(monkeypatch, dummy_context):
    """–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    import registration
    monkeypatch.setattr(registration, "is_registered", lambda _tid: False)

    upd = DummyUpdate(user_id=999, chat_id=AUTHORIZED_CHAT_ID, text="–õ—é–±–æ–π —Ç–µ–∫—Å—Ç")

    state = await _handle(upd, dummy_context)

    # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FIO –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
    assert state == FIO
    assert len(upd.message.sent_texts) == 1
    assert "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é" in upd.message.sent_texts[0]


@pytest.mark.asyncio
async def test_get_classes_validation_success(monkeypatch, dummy_context):
    """–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–ª–∞—Å—Å–æ–≤"""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dummy_context.user_data["fio"] = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Bot"
    dummy_context.user_data["phone"] = "+79990000001"
    dummy_context.user_data["subject"] = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
    
    # –ú–æ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ register_teacher —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
    import registration
    monkeypatch.setattr(registration, "register_teacher", lambda data: True)
    
    upd = DummyUpdate(text="—Å—Ä–µ–¥–Ω–∏–µ")
    
    state = await get_classes(upd, dummy_context)
    
    assert state == -1  # ConversationHandler.END
    assert "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in upd.message.sent_texts[-1]
    assert dummy_context.user_data["classes"] == "—Å—Ä–µ–¥–Ω–∏–µ"


@pytest.mark.asyncio
async def test_handle_message_registered_teacher_adds_lesson(monkeypatch, dummy_context):
    """–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"""
    import registration
    import lessons

    # –ú–æ–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    monkeypatch.setattr(registration, "is_registered", lambda _tid: True)
    monkeypatch.setattr(registration, "get_teacher_name_by_id", lambda _tid: "–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∏—Ç–µ–ª—å")

    # –ú–æ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é process_lesson_message, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ Google Sheets
    def fake_process_lesson_message(teacher_name, message_text):
        return "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nüë§ –£—á–µ–Ω–∏–∫: –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä\nüìö –ö–ª–∞—Å—Å: 5\nüìÖ –î–∞—Ç–∞: 15.08.2024\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–∞–º–µ—á–∞–Ω–∏–µ"

    monkeypatch.setattr(lessons, "process_lesson_message", fake_process_lesson_message)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è
    upd = DummyUpdate(user_id=111, chat_id=AUTHORIZED_CHAT_ID, text="–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä 5 / –∑–∞–º–µ—á–∞–Ω–∏–µ")

    await _handle(upd, dummy_context)

    # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    assert any("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞" in s for s in upd.message.sent_texts)
    assert any("–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä" in s for s in upd.message.sent_texts)


@pytest.mark.asyncio
async def test_unauthorized_chat_ignored(monkeypatch, dummy_context):
    """–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    import registration
    monkeypatch.setattr(registration, "is_registered", lambda _tid: True)

    # –ß–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π ID
    upd = DummyUpdate(user_id=111, chat_id=99999, text="–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä 5")

    res = await _handle(upd, dummy_context)

    # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None
    assert res is None
    assert upd.message.sent_texts == []


@pytest.mark.asyncio
async def test_handle_message_error_handling(monkeypatch, dummy_context):
    """–í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    import registration
    import lessons

    monkeypatch.setattr(registration, "is_registered", lambda _tid: True)
    monkeypatch.setattr(registration, "get_teacher_name_by_id", lambda _tid: "–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∏—Ç–µ–ª—å")

    # –ú–æ–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ process_lesson_message
    def fake_process_lesson_message(teacher_name, message_text):
        raise Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")

    monkeypatch.setattr(lessons, "process_lesson_message", fake_process_lesson_message)

    upd = DummyUpdate(user_id=111, chat_id=AUTHORIZED_CHAT_ID, text="–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä 5")

    await _handle(upd, dummy_context)

    # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    assert any("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" in s for s in upd.message.sent_texts) 